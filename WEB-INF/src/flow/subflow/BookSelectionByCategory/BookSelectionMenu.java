package flow.subflow.BookSelectionByCategory;

import java.util.Collection;
import java.util.LinkedList;
import java.util.List;

import org.json.JSONObject;

import com.avaya.sce.runtime.Prompt;
import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.IVariableField;
import com.avaya.sce.runtimecommon.SCESession;

import connectivity.ws.operations.IntegrationClass;
import connectivity.ws.operations.ProjectVariablesMenuClass;
import flow.IProjectVariables;

/**
 * Class that represents a menu. A menu can contain prompts, choices and links
 * as well as handlers for various events that may occur while the menu is
 * executing Last generated by Orchestration Designer at: 2023-FEB-09 05:51:12
 * PM
 */
public class BookSelectionMenu extends com.avaya.sce.runtime.Menu {
	List<String> books = new LinkedList();
	List<String> prices = new LinkedList();
	List<String> quantities = new LinkedList();
	// {{START:CLASS:FIELDS
	// }}END:CLASS:FIELDS

	/**
	 * Default constructor Last generated by Orchestration Designer at: 2023-FEB-09
	 * 05:51:12 PM
	 */
	public BookSelectionMenu() {
		// {{START:CLASS:CONSTRUCTOR
		super();
		setNeedsDefaultDisconnectHandler(false);
		// }}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method is generated automatically and should not be manually edited.
	 * To manually edit the links for the node, override:
	 *     void updateLinks(Collection links, SCESession mySession)
	 * Last generated by Orchestration Designer at: 2023-FEB-10  10:02:09 AM
	 * @return a collection of links
	 */
	public java.util.Collection getLinks(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Link link;
		java.util.List list;
		java.util.Collection grammarInfo = null;
		java.util.Collection<com.avaya.sce.runtime.CaptureExpression> captureExpr = null;
		// This item does not have any defined links
		list = new java.util.ArrayList();
		String ___tempGrammarName = null;

		return(list);
	}

	/**
	 * This method is generated automatically and should not be manually edited.
	 * To manually edit the properties for the node, override:
	 *     void updateProperties(Collection properties, SCESession mySession)
	 * Last generated by Orchestration Designer at: 2023-FEB-10  10:02:09 AM
	 * @return a collection of properties
	 */
	public java.util.Collection getProperties(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Property property;
		java.util.List list;
		// This item does not have any defined properties
		list = new java.util.ArrayList();

		return(list);
	}

	/**
	 * This method is generated automatically and should not be manually edited.
	 * To manually edit the event handlers for the node, override:
	 *    void updateEvents(Collection events, SCESession mySession)
	 * Last generated by Orchestration Designer at: 2023-FEB-10  10:02:09 AM
	 * @return a collection of Events
	 */
	public java.util.Collection getEvents(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list;
		com.avaya.sce.runtime.Event event;
		list = new java.util.ArrayList(2);
		java.util.List eventPromptNames = null;
		String ___tempPromptName = null;

		// build the list of prompt names
		eventPromptNames = new java.util.ArrayList(1);
		
		eventPromptNames.add(new com.avaya.sce.runtime.PromptRefInfo("noInputEntry", ""));

		event = new com.avaya.sce.runtime.Event(com.avaya.sce.runtimecommon.SCERT.EVENT_NOINPUT, (com.avaya.sce.runtime.PromptRefInfo[])eventPromptNames.toArray(new com.avaya.sce.runtime.PromptRefInfo[0]), new com.avaya.sce.runtime.Goto("BookSelectionByCategory-NoInputDataPasswordCopy", 2, true, ""));
		list.add(event);

		// build the list of prompt names
		eventPromptNames = new java.util.ArrayList(1);
		
		eventPromptNames.add(new com.avaya.sce.runtime.PromptRefInfo("noMatchEntry", ""));

		event = new com.avaya.sce.runtime.Event(com.avaya.sce.runtimecommon.SCERT.EVENT_NOMATCH, (com.avaya.sce.runtime.PromptRefInfo[])eventPromptNames.toArray(new com.avaya.sce.runtime.PromptRefInfo[0]), new com.avaya.sce.runtime.Goto("BookSelectionByCategory-NoMatchDataPasswordCopy", 2, true, ""));
		list.add(event);
		return(list);
	}

	/**
	 * Builds the list of choices for the menu.  This list is built
	 * automatically by the code generator and should not be edited
	 * manually.  Future code generation may overwrite any changes
	 * to this method.<br>
	 * To modify the list of choices, override:<br>
	 *    updateChoices(Collection choices, SCESession mySession)
	 * Last generated by Orchestration Designer at: 2023-FEB-10  10:02:09 AM
	 */
	public java.util.Collection getChoices(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Choice choice = null;
		java.util.Collection grammarInfo = null;
		list = new java.util.ArrayList(1);
		String ___tempGrammarName = null;

		// build the list of grammar information objects for the choice
		grammarInfo = new java.util.ArrayList();


		choice = new com.avaya.sce.runtime.Choice("Exit", "0", true, "exact", "BookSelectionByCategory-ReturnTocart", grammarInfo, true);
		list.add(choice);

		return(list);
	}

	/**
	 * Builds the list of prompts that are used by this flow item<br>
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of prompts for the flow item, override:
	 *     updatePrompts(Collection prompts, SCESession mySession)
	 * @return list of prompts for the menu
	 * Last generated by Orchestration Designer at: 2023-FEB-10  10:02:09 AM
	 */
	public java.util.Collection getPrompts(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		String ___tempPromptName = null;
		// Item has no prompts associated
		list = new java.util.ArrayList();

		return(list);
	}

	/**
	 * Builds the list of tracking items that are generated by this flow item<br>
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.
	 * @return list of tracking items for the item
	 * Last generated by Orchestration Designer at: 2023-FEB-10  10:02:09 AM
	 */
	public java.util.Collection getTrackingActions(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;

		// Item has no tracking items.
		list = new java.util.ArrayList();
		return(list);
	}

	@Override
	public void requestBegin(SCESession mySession) {
		try {

			IntegrationClass integration = new IntegrationClass();
			String categoryName = mySession
					.getVariableField(IProjectVariables.MENU_COMMON, IProjectVariables.MENU_COMMON_FIELD_CATEGORY_NAME)
					.getStringValue();
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,
					"http://localhost:8082/product/getbooks/" + categoryName.replaceAll(" ", "%20"), mySession);
			List<JSONObject> apiGet = integration
					.apiGet("http://localhost:8082/product/getbooks/" + categoryName.replaceAll(" ", "%20"));
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, apiGet.toString(), mySession);
			for (int i = 0; i < apiGet.size(); i++) {
				books.add(apiGet.get(i).get("bookName").toString());
				quantities.add(apiGet.get(i).get("bookQuantity").toString());
				prices.add(apiGet.get(i).get("bookPrice").toString());
				System.out.println(apiGet.get(i).get("bookName").toString());
			}
			IVariableField booksList = mySession.getVariableField(IProjectVariables.MENU_COMMON,
					IProjectVariables.MENU_COMMON_FIELD_BOOK_MENU_LIST);
			IVariableField priceList = mySession.getVariableField(IProjectVariables.MENU_COMMON,
					IProjectVariables.MENU_COMMON_FIELD_PRICE_LIST);
			IVariableField quantityList = mySession.getVariableField(IProjectVariables.MENU_COMMON,
					IProjectVariables.MENU_COMMON_FIELD_QUANTITY_LIST);
			booksList.setValue(books);
			priceList.setValue(prices);
			quantityList.setValue(quantities);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, apiGet.toString(), mySession);
		} catch (Exception e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, e, mySession);
		}
	}

	@Override
	public void updateChoices(Collection choices, SCESession mySession) {
		try {
			super.updateChoices(choices, mySession);
			com.avaya.sce.runtime.Choice choice = null;
			java.util.Collection grammarInfo = null;
			grammarInfo = new java.util.ArrayList();
			int CategoryMenuPageNumber = mySession
					.getVariableField(IProjectVariables.MENU_COMMON, IProjectVariables.MENU_COMMON_FIELD_MENU_PAGE)
					.getIntValue();
			int pageCount = 0;
			if (books.size() % 6 == 0) {
				pageCount = books.size() / 6;
			} else {
				pageCount = (books.size() / 6) + 1;
			}
			if (pageCount == 1) {
				for (int i = 0; i < books.size(); i++) {
					choice = new com.avaya.sce.runtime.Choice(books.get(i), String.valueOf(i + 1), true, "exact",
							"BookSelectionByCategory-ReturnTocart", grammarInfo, true);
					choices.add(choice);
				}
				choice = new com.avaya.sce.runtime.Choice("Repeat", "9", true, "exact",
						"BookSelectionByCategory-booksMenu", grammarInfo, true);
				choices.add(choice);
			} else {
				if (CategoryMenuPageNumber == 0) {
					for (int i = 0; i < 6; i++) {
						choice = new com.avaya.sce.runtime.Choice(books.get(i), String.valueOf(i + 1), true, "exact",
								"BookSelectionByCategory-ReturnTocart", grammarInfo, true);
						choices.add(choice);
					}
					choice = new com.avaya.sce.runtime.Choice("next", "7", true, "exact",
							"BookSelectionByCategory-booksMenuNext", grammarInfo, true);
					choices.add(choice);
					choice = new com.avaya.sce.runtime.Choice("Repeat", "9", true, "exact",
							"BookSelectionByCategory-BookSelectionMenu", grammarInfo, true);
					choices.add(choice);
				} else if (CategoryMenuPageNumber == pageCount - 1) {
					for (int i = CategoryMenuPageNumber * 6; i < books.size(); i++) {
						choice = new com.avaya.sce.runtime.Choice(books.get(i),
								String.valueOf(i - ((CategoryMenuPageNumber * 6) - 1)), true, "exact",
								"BookSelectionByCategory-ReturnTocart", grammarInfo, true);
						choices.add(choice);
					}
					choice = new com.avaya.sce.runtime.Choice("Repeat", "9", true, "exact",
							"BookSelectionByCategory-booksMenu", grammarInfo, true);
					choices.add(choice);
					choice = new com.avaya.sce.runtime.Choice("previous", "8", true, "exact",
							"BookSelectionByCategory-BookSelectionMenu", grammarInfo, true);
					choices.add(choice);
				} else {
					for (int i = CategoryMenuPageNumber * 6; i < (CategoryMenuPageNumber * 6) + 6; i++) {
						choice = new com.avaya.sce.runtime.Choice(books.get(i),
								String.valueOf(i - ((CategoryMenuPageNumber * 6) - 1)), true, "exact",
								"BookSelectionByCategory-ReturnTocart", grammarInfo, true);
						choices.add(choice);
					}
					choice = new com.avaya.sce.runtime.Choice("Repeat", "9", true, "exact",
							"BookSelectionByCategory-booksMenu", grammarInfo, true);
					choices.add(choice);
					choice = new com.avaya.sce.runtime.Choice("next", "7", true, "exact",
							"BookSelectionByCategory-BookSelectionMenu", grammarInfo, true);
					choices.add(choice);
					choice = new com.avaya.sce.runtime.Choice("previous", "8", true, "exact",
							"BookSelectionByCategory-BookSelectionMenu", grammarInfo, true);
					choices.add(choice);
				}
			}
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Choices : " + choices.size(), mySession);
		} catch (Exception e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, e + "choices", mySession);
		}
	}

	@Override
	public void updatePrompts(Collection prompts, SCESession mySession) {
		try {
			super.updatePrompts(prompts, mySession);
			Prompt p = new Prompt() {
				@Override
				public void buildPrompt() {

				}
			};
			p.setSession(mySession);
			p.setOrder(com.avaya.sce.runtime.Prompt.STANDARD);
			p.setTimeout(1, 8000);
			p.setBargin(1, true);
			com.avaya.sce.runtime.Format format = null;
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "update promt Entry", mySession);
			int MenuPageNumber = mySession
					.getVariableField(IProjectVariables.MENU_COMMON, IProjectVariables.MENU_COMMON_FIELD_MENU_PAGE)
					.getIntValue();
			int pageCount = 0;
			if (books.size() % 6 == 0) {
				pageCount = books.size() / 6;
			} else {
				pageCount = (books.size() / 6) + 1;
			}
			ProjectVariablesMenuClass setValue = new ProjectVariablesMenuClass();
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "booksMenuPageNumber :" + MenuPageNumber + "\npageCount :"
					+ pageCount + "\nbookSize :" + books.size(), mySession);
			p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("AudioPath:bookSelectionMenu",
					com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));
			if (pageCount == 1) {
				for (int i = 0; i < books.size(); i++) {
					setValue.projectVariableSetValue(mySession, "http://172.16.11.17:8090/AudioPrompts/Elibrary/"
							+ books.get(i).replaceAll(" ", "") + ".wav", i + 1);
					setValue.priceSetValue(mySession, prices.get(i), i+1);
					setValue.quantitySetValue(mySession, quantities.get(i), i+1);
					p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("menuCommon:menuOption" + (i + 1),
							com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));
					p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("menuCommon:menuOptionValue" + (i + 1),
							com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));
					p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("menuCommon:price",
							com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));
					format = new com.avaya.sce.runtime.Format();
					format.add("format", "currency");
					format.add("Currency Format", "N$");
					p.add(1, new com.avaya.sce.runtime.PromptElement(com.avaya.sce.runtime.PromptElement.VARIABLE_AUDIO,
							"menuCommon:priceValue" + (i + 1), format, false));
					p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("menuCommon:Quantity",
							com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));
					format = new com.avaya.sce.runtime.Format();
					format.add("format","number");
					format.add("Number Type","integer");
					format.add("inflection","Nn");
					p.add(1, new com.avaya.sce.runtime.PromptElement(com.avaya.sce.runtime.PromptElement.VARIABLE_AUDIO,
							"menuCommon:quantityValue" + (i + 1), format, false));
				}
				p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("menuCommon:menuOption9",
						com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "menuCommon:menuOption9", mySession);
			} else {
				if (MenuPageNumber == 0) {
					for (int i = 0; i < 6; i++) {
						setValue.projectVariableSetValue(mySession, "http://172.16.11.17:8090/AudioPrompts/Elibrary/"
								+ books.get(i).replaceAll(" ", "") + ".wav", i + 1);
						p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("menuCommon:menuOption" + (i + 1),
								com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));
						p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("menuCommon:menuOptionValue" + (i + 1),
								com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));
					}
					p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("menuCommon:menuOption7",
							com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));
					p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("menuCommon:menuOption9",
							com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));
				} else if (MenuPageNumber == pageCount - 1) {
					for (int i = MenuPageNumber * 6; i < books.size(); i++) {
						setValue.projectVariableSetValue(mySession, "http://172.16.11.17:8090/AudioPrompts/Elibrary/"
								+ books.get(i).replaceAll(" ", "") + ".wav", (i - ((MenuPageNumber * 6) - 1)));
						p.add(1, new com.avaya.sce.runtime.PhraseVariableElement(
								"menuCommon:menuOption" + (i - ((MenuPageNumber * 6) - 1)),
								com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));
						p.add(1, new com.avaya.sce.runtime.PhraseVariableElement(
								"menuCommon:menuOptionValue" + (i - ((MenuPageNumber * 6) - 1)),
								com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));
					}
					p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("menuCommon:menuOption9",
							com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));
					p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("menuCommon:menuOption8",
							com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));
				} else {
					for (int i = MenuPageNumber * 6; i < (MenuPageNumber * 6) + 6; i++) {
						setValue.projectVariableSetValue(mySession, "http://172.16.11.17:8090/AudioPrompts/Elibrary/"
								+ books.get(i).replaceAll(" ", "") + ".wav", (i - ((MenuPageNumber * 6) - 1)));
						p.add(1, new com.avaya.sce.runtime.PhraseVariableElement(
								"menuCommon:menuOption" + (i - ((MenuPageNumber * 6) - 1)),
								com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));
						p.add(1, new com.avaya.sce.runtime.PhraseVariableElement(
								"menuCommon:menuOptionValue" + (i - ((MenuPageNumber * 6) - 1)),
								com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));
					}

					p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("menuCommon:menuOption7",
							com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));
					p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("menuCommon:menuOption8",
							com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));
					p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("menuCommon:menuOption9",
							com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));
				}
			}
			prompts.add(p);

			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "update promt Exit", mySession);
		} catch (Exception e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, e, mySession);
		}

	}
}
